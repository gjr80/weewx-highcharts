##errorCatcher Echo
#*
A WeeWX template to generate a JSON data file for weekly observation plots.

Copyright (C) 2016-21 Gary Roderick                 gjroderick<at>gmail.com

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see http://www.gnu.org/licenses/.


Description

This template is part of the Highcharts for WeeWX extension and produces a text
file containing JSON format data for use with Highcharts to plot WeeWX 
observation data over a one week period.


Pre-Requisites

- Highcharts for WeeWX extension
- PyEphem for inclusion of insolation data


Version: 0.4.0                                      Date: xx xxxxx 2021

Revision History
    xx xxxxx 2021       v0.4.0
        - now uses .series tags where possible
    17 March 2021       v0.3.2
        - no change, version number change only
    20 October 2020     v0.3.1
        - no change, version number change only
    20 September 2020   v0.3.0
        - no change, version number change only
    4 September 2018    v0.2.2
        - reformatted comments
    16 May 2017         v0.2.1
        - no change, version number change only
    4 May 2017          v0.2.0
        - no change, version number change only
    22 November 2016    v0.1.0
        - initial implementation
*#
#import calendar
#import time
#import json
#set $stop_struct = time.localtime($current.dateTime.raw)
#set $utcOffset = (calendar.timegm($stop_struct) - calendar.timegm(time.gmtime(time.mktime($stop_struct)))) / 60
[{
"_version": "week.json.tmpl version 0.4.0",
"utcoffset": $utcOffset,
"timespan": {"start": $weekPlotStart, "stop": $weekPlotEnd},
##
"temperatureplot": {"series":
{"outTemp": {"name": "Temperature", "data": $last_seven_day.outTemp.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')},
"dewpoint": {"name": "Dew Point", "data": $last_seven_day.dewpoint.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')},
"appTemp": {"name": "Apparent Temperature", "data": $last_seven_day.appTemp.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')}},
"yAxisLabel": {"text": #slurp
#if $unit.unit_type_dict.group_temperature == "degree_C"
 "(\u00B0 C)"
#else
 "(\u00B0 F)"
#end if
},
"units": #slurp
#if $unit.unit_type_dict.group_temperature == "degree_C"
 "\u00B0 C"
#else
 "\u00B0 F"
#end if
},
##
"windchillplot": {"series":
{#slurp
"appTemp": {"name": "Apparent Temperature", "data": $last_seven_day.appTemp.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')},
"windchill": {"name": "Wind Chill", "data": $last_seven_day.windchill.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')},
"heatindex": {"name": "Heat Index", "data": $last_seven_day.heatindex.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')}},
"yAxisLabel": {"text": #slurp
#if $unit.unit_type_dict.group_temperature == "degree_C"
 "(\u00B0 C)"
#else
 "(\u00B0 F)"
#end if
},
"units": #slurp
#if $unit.unit_type_dict.group_temperature == "degree_C"
 "\u00B0 C"
#else
 "\u00B0 F"
#end if
},
##
"humidityplot": {"series":
{"outHumidity": {"name": "Humidity", "data": $last_seven_day.outHumidity.series().json(ndigits=0, time_series='start', time_unit='unix_epoch_ms')}}
},
##
"barometerplot": {"series":
{"barometer": {"name": "Barometer", "data": $last_seven_day.barometer.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')}},
"yAxisLabel": {"text": #slurp
#if $unit.unit_type_dict.group_pressure == "hPa"
 "(hPa)"
#elif $unit.unit_type_dict.group_pressure == "inHg"
 "(inHg)"
#elif $unit.unit_type_dict.group_pressure == "mmHg"
 "(mmHg)"
#else
 "(mbar)"
#end if
},
"units": #slurp
#if $unit.unit_type_dict.group_pressure == "hPa"
 "hPa"
#elif $unit.unit_type_dict.group_pressure == "inHg"
 "inHg"
#elif $unit.unit_type_dict.group_pressure == "mmHg"
 "mmHg"
#else
 "mbar"
#end if
},
##
"windplot": {"series":
{"windSpeed": {"name": "Wind Speed", "data": $last_seven_day.windSpeed.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')},
"windGust": {"name": "Wind Gust", "data": $last_seven_day.windGust.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')}},
"yAxisLabel": {"text": #slurp
#if $unit.unit_type_dict.group_speed == "km_per_hour"
 "(km/h)"
#elif $unit.unit_type_dict.group_speed == "mile_per_hour"
 "(mph)"
#elif $unit.unit_type_dict.group_speed == "meter_per_second"
 "(m/s)"
#else
 "(knots)"
#end if
},
"units": #slurp
#if $unit.unit_type_dict.group_speed == "km_per_hour"
 "km/h"
#elif $unit.unit_type_dict.group_speed == "mile_per_hour"
 "mph"
#elif $unit.unit_type_dict.group_speed == "meter_per_second"
 "m/s"
#else
 "knots"
#end if
},
##
"winddirplot": {"series":
{"windDir": {"name": "Wind Direction", "data": $last_seven_day.windDir.series().json(ndigits=0, time_series='start', time_unit='unix_epoch_ms')}}
},
##
"rainplot": {"series":
{"rain": {"name": "Rainfall", "data": $last_seven_day.rain.series(aggregation_type='sum', aggregation_interval=3600).json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')}},
"yAxisLabel": {"text": #slurp
#if $unit.unit_type_dict.group_rain == "mm"
 "(mm)"
#elif $unit.unit_type_dict.group_rain == "inch"
 "(in)"
#else
 "(cm)"
#end if
},
"units": #slurp
#if $unit.unit_type_dict.group_rain == "mm"
 "mm"
#elif $unit.unit_type_dict.group_rain == "inch"
 "in"
#else
 "cm"
#end if
},
##
"radiationplot": {"series":
{"radiation": {"name": "Solar Radiation", "data": $last_seven_day.radiation.series().json(ndigits=0, time_series='start', time_unit='unix_epoch_ms')},
"insolation": {"name": "Theoretical Max Solar Radiation", "data": $last_seven_day.maxSolarRad.series().json(ndigits=0, time_series='start', time_unit='unix_epoch_ms')}}
},
##
"uvplot": {"series":
{"uv": {"name": "UV Index", "data": $last_seven_day.UV.series().json(ndigits=1, time_series='start', time_unit='unix_epoch_ms')}}
},
##
"windroseDay": {#slurp
"series": $wr86400['windrosejson'],
"xAxis": {"categories": $wr86400['xAxisCategoriesjson']},
"yAxis": $wr86400['yAxisjson'],
"colors": $wr86400['coloursjson'],
"title": {"text": $wr86400['titlejson']},
"legend": {"title": {"text": $wr86400['legendTitlejson']}},
"bullseye": $wr86400['bullseyejson']
},
##
"windroseWeek": {#slurp
"series": $wr604800['windrosejson'],
"xAxis": {"categories": $wr604800['xAxisCategoriesjson']},
"yAxis": $wr604800['yAxisjson'],
"colors": $wr604800['coloursjson'],
"title": {"text": $wr604800['titlejson']},
"legend": {"title": {"text": $wr604800['legendTitlejson']}},
"bullseye": $wr604800['bullseyejson']
}
}]